chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Importation de la feuille
buf             <- read.xls(chemin_param,sheet=feuille,perl="P:/Retraites/Destinie/Perl/bin/perl.exe",na.strings = c("NA",""),method="tab")
# Supression de la première ligne
buf             <- buf[-1,]
# Supression des observation sans date
buf             <- buf[!is.na(buf$Date),]
# On garde uniquement les variables date et var
buf             <- subset(buf,select=c("Date",var))
# On convertit la date au format mois/an
buf$Date        <- as.yearmon(buf$Date)
# Problème : read.xls importe les valeurs en euros au format string (36,372 €, de plus ). Solution provisoire(?)
buf[,var]       <-sub("â‚¬","", buf[,var])
buf[,var]       <-sub(",","", buf[,var])
buf[,var]       <-as.numeric(buf[,var])
# Dataframe avec toutes les dates de janvier 1901 à décembre 2060
a          <- data.frame((seq(as.yearmon("1901-01"), as.yearmon("2060-12"), by=1/12)))
colnames(a)<- "a"
# Merge
buf <- merge(buf,a, by.x="Date",by.y="a",all=TRUE)
# On extrait la série temporelle du paramètre (format zoo)
z <- zoo(buf[,var],buf$Date)
# On complète var pour les dates non renseignées (// carryforward sous stata)
z <- na.locf(z, na.rm=FALSE)
# On remplace par NA pour les dates au delà de 2012
z[index(z)>"déc. 2012"]<-NA
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
# Series de fonctions qui créent à partir de la série temporelle un vecteur, dont la longueur dépend du pas considéré
# NB: A faire après la projection.
# A utiliser lorsque l'on appelle les variables dans les programmes (DefVarRetr)
param.import.mois<-function(var)
{
# Chargement de la série temporelle
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Extraction du vecteur paramètre mensuel
param_mois       <- numeric (1920)
param_mois       <- coredata(z)
return (param_mois)
}
param.import.trim<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Création de la série temporelle trimestrielle
z.qtr <- aggregate(z, as.yearqtr, mean)
param_trim        <- numeric (640)
param_trim        <- coredata(z.qtr)
return (param_trim)
}
param.import.annee<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z.yr <- aggregate(z, floor, mean)
param_annee        <- numeric (200)
param_annee[1:160] <- coredata(z.yr)
return (param_annee)
}
# Outils de projection : projete la dernière valeur jusqu'à la fin de projection
param.prolong <-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z <- na.locf(z, na.rm=FALSE)
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
param.save("RevaloRG","RevaloRG")
param.save("RevaloRG","RevaloRG")
############################################ OUTILS POUR L'IMPORTATION DES PARAMETRES LEGISLATIFS ################################
#
#
# Cette bibliothèque rassemble les outils permettant d'importer les paramètres des fichiers Barèmes IPP dont on se sert pour
# la microsimulation:
# - save_param : importe les données des fichiers excel, sous la forme d'un objet "zoo", série temporelle au pas mensuel
# - import_param_mois/trim/annee : à partir de la série temporelle obtenue (augmenté de la projection jusqu'en 2060 dans ProjParam),
# importe un vecteur de valeurs pour le paramètre, au format désiré.
# NB: PROBLEME D'HARMONISATION DE LA PRESENTATION DANS LEGISLATION (lignes à supprimer, ...)
# Pour l'instant save_param ok si première ligne = nom de la variable et deuxième ligne = à supprimer, 3e ligne = première observation.
#Packages utilisés
library (gdata)
library (zoo)
# Save Param : sauve un "zoo, série temporelle du paramètre d'intérêt, avec date au pas mensuel associé.
# Pour utilisation générale : changer chemin_param (chemin pour le fichier législatif dont on extrait le paramètre)
# et chemin_sauv (dossier d'enregistrement du fichier)
# Exemple d'appel : RevaloRG <- save_param("RevaloRG","Coefficient"), RevaloRG étant la feuille correspondante dans Législation Retraite
# et Coefficient le nom de la varibale dans le fichier.
param.save<-function(feuille,var)
{
chemin_param <- "P:/Retraites/Legislation/Barèmes IPP - Législation retraite.xlsx"
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Importation de la feuille
buf             <- read.xls(chemin_param,sheet=feuille,perl="P:/Retraites/Destinie/Perl/bin/perl.exe",na.strings = c("NA",""),method="tab")
# Supression de la première ligne
buf             <- buf[-1,]
# Supression des observation sans date
buf             <- buf[!is.na(buf$Date),]
# On garde uniquement les variables date et var
buf             <- subset(buf,select=c("Date",var))
# On convertit la date au format mois/an
buf$Date        <- as.yearmon(buf$Date)
# Problème : read.xls importe les valeurs en euros au format string (36,372 €, de plus ). Solution provisoire(?)
buf[,var]       <-sub("â‚¬","", buf[,var])
buf[,var]       <-sub(",","", buf[,var])
buf[,var]       <-as.numeric(buf[,var])
# Dataframe avec toutes les dates de janvier 1901 à décembre 2060
a          <- data.frame((seq(as.yearmon("1901-01"), as.yearmon("2060-12"), by=1/12)))
colnames(a)<- "a"
# Merge
buf <- merge(buf,a, by.x="Date",by.y="a",all=TRUE)
# On extrait la série temporelle du paramètre (format zoo)
z <- zoo(buf[,var],buf$Date)
# On complète var pour les dates non renseignées (// carryforward sous stata)
z <- na.locf(z, na.rm=FALSE)
# On remplace par NA pour les dates au delà de 2012
z[index(z)>"déc. 2012"]<-NA
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
# Series de fonctions qui créent à partir de la série temporelle un vecteur, dont la longueur dépend du pas considéré
# NB: A faire après la projection.
# A utiliser lorsque l'on appelle les variables dans les programmes (DefVarRetr)
param.import.mois<-function(var)
{
# Chargement de la série temporelle
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Extraction du vecteur paramètre mensuel
param_mois       <- numeric (1920)
param_mois       <- coredata(z)
return (param_mois)
}
param.import.trim<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Création de la série temporelle trimestrielle
z.qtr <- aggregate(z, as.yearqtr, mean)
param_trim        <- numeric (640)
param_trim        <- coredata(z.qtr)
return (param_trim)
}
param.import.annee<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z.yr <- aggregate(z, floor, mean)
param_annee        <- numeric (200)
param_annee[1:160] <- coredata(z.yr)
return (param_annee)
}
# Outils de projection : projete la dernière valeur jusqu'à la fin de projection
param.prolong <-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z <- na.locf(z, na.rm=FALSE)
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
param.save("RevaloRG","RevaloRG")
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
############################################ OUTILS POUR L'IMPORTATION DES PARAMETRES LEGISLATIFS ################################
#
#
# Cette bibliothèque rassemble les outils permettant d'importer les paramètres des fichiers Barèmes IPP dont on se sert pour
# la microsimulation:
# - save_param : importe les données des fichiers excel, sous la forme d'un objet "zoo", série temporelle au pas mensuel
# - import_param_mois/trim/annee : à partir de la série temporelle obtenue (augmenté de la projection jusqu'en 2060 dans ProjParam),
# importe un vecteur de valeurs pour le paramètre, au format désiré.
# NB: PROBLEME D'HARMONISATION DE LA PRESENTATION DANS LEGISLATION (lignes à supprimer, ...)
# Pour l'instant save_param ok si première ligne = nom de la variable et deuxième ligne = à supprimer, 3e ligne = première observation.
#Packages utilisés
library (gdata)
library (zoo)
# Save Param : sauve un "zoo, série temporelle du paramètre d'intérêt, avec date au pas mensuel associé.
# Pour utilisation générale : changer chemin_param (chemin pour le fichier législatif dont on extrait le paramètre)
# et chemin_sauv (dossier d'enregistrement du fichier)
# Exemple d'appel : RevaloRG <- save_param("RevaloRG","Coefficient"), RevaloRG étant la feuille correspondante dans Législation Retraite
# et Coefficient le nom de la varibale dans le fichier.
param.save<-function(feuille,var)
{
chemin_param <- "P:/Retraites/Legislation/Barèmes IPP - Législation retraite.xlsx"
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Importation de la feuille
buf             <- read.xls(chemin_param,sheet=feuille,perl="P:/Retraites/Destinie/Perl/bin/perl.exe",na.strings = c("NA",""),method="tab")
# Supression de la première ligne
buf             <- buf[-1,]
# Supression des observation sans date
buf             <- buf[!is.na(buf$Date),]
# On garde uniquement les variables date et var
buf             <- subset(buf,select=c("Date",var))
# On convertit la date au format mois/an
buf$Date        <- as.yearmon(buf$Date)
# Problème : read.xls importe les valeurs en euros au format string (36,372 €, de plus ). Solution provisoire(?)
buf[,var]       <-sub("â‚¬","", buf[,var])
buf[,var]       <-sub(",","", buf[,var])
buf[,var]       <-as.numeric(buf[,var])
# Dataframe avec toutes les dates de janvier 1901 à décembre 2060
a          <- data.frame((seq(as.yearmon("1901-01"), as.yearmon("2060-12"), by=1/12)))
colnames(a)<- "a"
# Merge
buf <- merge(buf,a, by.x="Date",by.y="a",all=TRUE)
# On extrait la série temporelle du paramètre (format zoo)
z <- zoo(buf[,var],buf$Date)
# On complète var pour les dates non renseignées (// carryforward sous stata)
z <- na.locf(z, na.rm=FALSE)
# On remplace par NA pour les dates au delà de 2012
z[index(z)>"déc. 2012"]<-NA
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
# Series de fonctions qui créent à partir de la série temporelle un vecteur, dont la longueur dépend du pas considéré
# NB: A faire après la projection.
# A utiliser lorsque l'on appelle les variables dans les programmes (DefVarRetr)
param.import.mois<-function(var)
{
# Chargement de la série temporelle
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Extraction du vecteur paramètre mensuel
param_mois       <- numeric (1920)
param_mois       <- coredata(z)
return (param_mois)
}
param.import.trim<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
# Création de la série temporelle trimestrielle
z.qtr <- aggregate(z, as.yearqtr, mean)
param_trim        <- numeric (640)
param_trim        <- coredata(z.qtr)
return (param_trim)
}
param.import.annee<-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z.yr <- aggregate(z, floor, mean)
param_annee        <- numeric (200)
param_annee[1:160] <- coredata(z.yr)
return (param_annee)
}
# Outils de projection : projete la dernière valeur jusqu'à la fin de projection
param.prolong <-function(var)
{
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
z <- na.locf(z, na.rm=FALSE)
save (z,file=(paste0(chemin_sauv,var,".RData")))
}
param.save("RevaloRG","RevaloRG")
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
#####################################   BAREMES : IMPORTATION ET PROJECTION DES BAREMES   ############################
# PROVISOIRE: à unifier avec la législation fiscale.
# PROVISOIRE: classement (selon hypothèse de projection par exemple).
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
# Paramètres retraite de base et pensions minimales
#
# RevaloSPC       : Coeff de revalorisation des salaires portés au compte (base 1 en 2003)
# Hypothèse de projection/retrospectif: égal à 1 après 2012 et avant première date (BIZARRE?)
# RevaloRG        : Coeff revalo nominale des pensions RG en cours de service
# Hypothèse de projection/retrospectif: égal à 1 après 2012 et avant première date (BIZARRE?)
# RevaloFP        : Coeff revalo nominale des pensions FP en cours de service
# Hypothèse de projection/retrospectif: égal à 1 après 2012 et avant première date (BIZARRE?)
# TauxSalRGSP     : Taux salarié régime général sous plafond
# TauxEmpRGSP     : Taux employeur régime général sous plafond
# TauxSalRGSalTot : Taux RG sur l'ensemble du salaire, partie salariée (rq : cette cotisation est affectée à l'assurance veuvage jusqu'en 2004, à l'assurance vieillesse ensuite)
# TauxEmpRGSalTot : Taux RG sur l'ensemble du salaire, partie patronale
# TauxCotFP       : Taux de cotisation salarié du secteur public
# MinVieil1       : minimum vieillesse personne seule
# MinVieil2       : minimum vieillesse pour un couple
# MinCont1        : minimum contributif
# MinCont2        : majoration du minimum contributif
# MinPR           : minimum de pension du régime général
# CoefMdaRG       : Coefficient MDA du RG
# CoefMdaFP       : Coefficient MDA de la FP
# Hypothèse de projection: égal à 1 après 2012 (BIZARRE?)
#RevaloSPC       <- param.save()
param.save("RevaloRG","RevaloRG")
load  (paste0(chemin_sauv,"RevaloRG",".RData"))
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,var,".RData"))
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
load  (paste0(chemin_sauv,"RevaloRG",".RData"))
fix(z)
z[z==NA]<-1
fix(z)
z[z==NA]
? zoo
z[coredata(z==NA)]
fix(z)
coredata(z==NA)
z[coredata(z==NA)]
z[which(z==NA)]
x1 <- zoo(1:5, 1:5)
x1[which(x1 > 3)]
x1[coredata(x1 > 3)
z[index(z)>"déc. 2012"]
z[index(z)>"déc. 2012"]
z[coredata==NA]
z[coredata(z)==NA]
fix(z)
z[coredata(z)=="NA"]
fix(z)
z[coredata(z)==1.1]
z[is.na(coredata(z))]
z[is.na(coredata(z))] <- 1.00
fix(z)
param.save("RevaloRG","RevaloRG")
load  (paste0(chemin_sauv,"RevaloRG",".RData"))
z[is.na(coredata(z))] <- 1.00
save (z,file=(paste0(chemin_sauv,"RevaloRG",".RData")))
RevaloRG        <- import_param_annee("RevaloRG")
RevaloRG        <- param.import.annee("RevaloRG")
fix(RevaloRG)
classement (selon hypothese de projection par exemple).
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Parametres retraite de base et pensions minimales
#
# RevaloSPC       :
param.save("RevaloRG","RevaloRG")
fix(z)
param.save("RevaloRG","RevaloRG")
fix(z)
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Parametres retraite de base et pensions minimales
#
# RevaloSPC       : Coeff de revalorisation des salaires portes au compte (base 1 en 2003)
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloRG        : Coeff revalo nominale des pensions RG en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloFP        : Coeff revalo nominale des pensions FP en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# TauxSalRGSP     : Taux salarie regime general sous plafond
# TauxEmpRGSP     : Taux employeur regime general sous plafond
# TauxSalRGSalTot : Taux RG sur l'ensemble du salaire, partie salariee (rq : cette cotisation est affectee a l'assurance veuvage jusqu'en 2004, a l'assurance vieillesse ensuite)
# TauxEmpRGSalTot : Taux RG sur l'ensemble du salaire, partie patronale
# TauxCotFP       : Taux de cotisation salarie du secteur public
# MinVieil1       : minimum vieillesse personne seule
# MinVieil2       : minimum vieillesse pour un couple
# MinCont1        : minimum contributif
# MinCont2        : majoration du minimum contributif
# MinPR           : minimum de pension du regime general
# CoefMdaRG       : Coefficient MDA du RG
# CoefMdaFP       : Coefficient MDA de la FP
#RevaloSPC       <- param.save()
param.save("RevaloRG","RevaloRG")
OVISOIRE: classement (selon hypothese de projection par exemple).
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Parametres retraite de base et pensions minimales
#
# RevaloSPC       : Coeff de revalorisation des salaires portes au compte (base 1 en 2003)
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloRG        : Coeff revalo nominale des pensions RG en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloFP        : Coeff revalo nominale des pensions FP en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# TauxSalRGSP     : Taux salarie regime general sous plafond
# TauxEmpRGSP     : Taux employeur regime general sous plafo
install.packages("zoo")
OVISOIRE: classement (selon hypothese de projection par exemple).
source("P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/OutilsImport.R")
chemin_sauv  <- "P:/Retraites/PENSIPP 0.0/Outils/OutilsParam/"
# Parametres retraite de base et pensions minimales
#
# RevaloSPC       : Coeff de revalorisation des salaires portes au compte (base 1 en 2003)
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloRG        : Coeff revalo nominale des pensions RG en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# RevaloFP        : Coeff revalo nominale des pensions FP en cours de service
# Hypothese de projection/retrospectif: egal a 1 apres 2012 et avant premiere date (BIZARRE?)
# TauxSalRGSP     : Taux salarie regime general sous plafond
# TauxEmpRGSP     : Taux employeur regime general sous plafo
param.save("RevaloRG","RevaloRG")
load  (paste0(chemin_sauv,"RevaloRG",".RData"))
fix(z)
z[is.na(coredata(z))] <- 1.00
fix(z)
save (z,file=(paste0(chemin_sauv,"RevaloRG",".RData")))
RevaloRG        <- param.import.annee("RevaloRG")
fix(RevaloRG)
############## Programme SimulRef #############
# Scénario de référence de départ en retraite à scénario inchangé.
# Hypothèse de départ en retraite: taux de remplacement cible.
# Calcul des aggrégats
# Conserve: age de départ en retraite, pension à liquidation, taux de cotisation d'équilibre (pension/salaire).
t0  <- Sys.time()
#### Chargement des programmes source ####
cheminsource <- "P:/Retraites/"
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/OutilsMS.R")) )
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/OutilsPensIPP.R")) )
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/DefVarRetr_Destinie.R")) )
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/OutilsLeg.R")) )
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/OutilsRetr.R")) )
source( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsRetraite/OutilsCN.R"))  )
load  ( (paste0(cheminsource,"PENSIPP 0.0/Modele/Outils/OutilsBio/BiosDestinie.RData")) )
setwd ( (paste0(cheminsource,"PENSIPP 0.0/Simulations/CN")
#### Initialisation ####
#Parametre de liquidation: TRC (cible et seuil)
for (i in 1:taille_max)
{
if (sexe[i]==1){k[i]     <-LogLogist(0.01,1,0.5,1.2) } else {k[i]<-LogLogist(0.01,1,0.5,1.5)}
delta_k[i] <- 0.01      # Augmentation de 1% par an après 60 ans (cf SimDir)
beta[i]     <-200 # Seuil: élevé (TRC)
}
cibletaux<-numeric(taille_max)
# Declaration des variable d'outputs
RATIOPENS <- numeric(50)
MSAL <- numeric(200)
MSALW <- numeric(200)
MPENS <-  numeric(200)
MPENSW <- numeric(200)
PIBREF <- numeric(200)
RATIOFIN<-numeric(200)
RATIODEM<-numeric(200)
RATIODEMCORR<-numeric(200)
SALMOY<-numeric(200)
PENMOY<-numeric(200)
TRCMOY<-numeric(200)
PENLIQMOY<-numeric(200)
AGELIQ<-numeric(160)
AGELIQH<-numeric(160)
AGELIQF<-numeric(160)
TRC <- numeric(taille_max)
pensionliq <- numeric(taille_max)
#### Début de la simulation ####
#  Rprof(tmp<-tempfile())
for (t in 80:160)   # Boucle temporelle, commence en 60, individu le plus vieux de la base né en 1909.
{
print (t)
Leg <- t
#   UseOpt(c("nobonif","nomda","noassimil","nomc","nomg","noptsgratuits","noavpf"))
for (i in 1:10)  # Boucle individuelle
{
if ((t-anaiss[i]>=55) && (ageliq[i]==0))
{
UseLeg(Leg,anaiss[i])
#       SimDir(i,t,"sw",cibletaux[])
SimDir(i,t,"tp")
if (liq[i]==t)
{
#        print (c(t,ageliq[i],duree_tot,duree_tot_maj))
pensionliq[i] <- pension[i]
#        TRC[i]<-cibletaux[i]
}
}
else if (ageliq[i]>0)
{
Revalo(i,t,t+1)
}
} # Fin boucle individuelle
MPENS[t]        <-sum(pension[statut[,t]>0])/Prix[t]
MSAL[t]         <-sum(salaire[,t])/Prix[t]
MPENSW[t]       <-1411*sum(pension[statut[,t]>0])/Prix[t]     #NB: 1411 : poids de l'échantillon
MSALW[t]        <-1411*sum(salaire[,t])/Prix[t]
PIBREF[t]       <-MSAL[t]*(PIB[109]/Prix[109])/MSAL[109]
RATIOPENS[t]    <-MPENSW[t]/PIBREF[t]
TRCMOY[t]       <- mean(TRC[which(liq[]==t)])
RATIOFIN[t]     <- sum (pension[which(statut[,t]>0)])/ sum (salaire[which(statut[,t]>0),t])
RATIODEM[t]     <- sum((t-anaiss>=60) & (statut[,t]>0))/sum((t-anaiss<60) &(statut[,t]>0))
SALMOY[t]       <- mean (salaire[which(salaire[,t]>0),t]/Prix[t])
PENMOY[t]       <- mean (pension[which(pension[]>0)]/Prix[t])
PENLIQMOY[t]    <- mean (pension[which( (pension[]>0)&liq[]==t)])
AGELIQ[t]       <- mean ( ageliq[which(liq[]==t)])
AGELIQH[t]      <- mean ( ageliq[which((liq[]==t)  & (sexe==1))] )
AGELIQF[t]      <- mean ( ageliq[which((liq[]==t) & (sexe==2))])
} # Fin boucle temporelle
#   Rprof()
#   summaryRprof(tmp)
#### Sorties ####
# Graphiques par année
#   plot  (seq(2010, 2059, by=1),RATIOPENS[110:159],xlab="Annee", ylab="Pension en % du PIB",ylim=c(0,0.16))
#   title (main = "Ratio retraite sur PIB", sub = "Scénario de Base")
#   plot  (seq(2010, 2059, by=1),RATIOFIN[110:159],xlab="Annee", ylab="Ratio Financier")
#   plot  (seq(2010, 2059, by=1),RATIODEM[110:159],xlab="Annee", ylab="Ratio Démographique")
#   plot  (seq(2010, 2059, by=1),SALMOY[110:159],xlab="Annee", ylab="Salaire moyen")
#   plot  (seq(2010, 2059, by=1),PENMOY[110:159],xlab="Annee", ylab="Pension moyenne")
#   plot  (seq(2010, 2059, by=1),PENLIQMOY[110:159],xlab="Annee", ylab="Pension à liquidation moyenne")
plot  (seq(2010, 2059, by=1),AGELIQ[110:159],xlab="Annee", ylab="Age moyen de liquidation - Hommes")
title (main = "Age de liquidation", sub = "Scénario de Base")
plot  (seq(2010, 2059, by=1),AGELIQH[110:159],xlab="Annee", ylab="Age moyen de liquidation - Hommes")
plot  (seq(2010, 2059, by=1),AGELIQF[110:159],xlab="Annee", ylab="Age moyen de liquidation - Femmes")
title (main = "Age de liquidation - Femmes", sub = "Scénario de Base")
# AGELIQ-TRC
plot(seq(2010, 2059, by=1),AGELIQ[110:159],type="l",col="red")
par(new=TRUE)
plot(seq(2010, 2059, by=1), TRCMOY[110:159],,type="l",col="blue",xaxt="n",yaxt="n",xlab="",ylab="")
axis(4)
mtext("TRC",side=4,line=3)
legend("bottomleft",col=c("red","blue"),lty=1,legend=c("AGELIQ","TRC"))
#### Sauvegarde des variables pour le scénario CN ####
pensionref <- pensionliq[1:taille_max]
ageref     <- ageliq[1:taille_max]
MPENSREF <- MPENS
MSALREF <- MSAL
save (ageref,pensionref,liq,MPENSREF,MSALREF,TRC,file=(paste0(cheminsource,"PENSIPP 0.0/Simulations/CN/ageref.RData")))
statut[1:10,t]>0]
statut[1:10,t]>0
pension[statut[1:10,t]>0])]
pension[statut[1:10,t]>0]
t
pension[which(statut[1:10,t]>0)]
which(statut[1:10,t]>0)
plot  (seq(2010, 2059, by=1),AGELIQ[110:159],xlab="Annee", ylab="Age moyen de liquidation - Hommes")
plot  (AGELIQ[110:159],xlab="Annee", ylab="Age moyen de liquidation - Hommes")
plot  (PENMOY[110:159],AGELIQ[110:159],xlab="Annee", ylab="Age moyen de liquidation - Hommes")
load("P:/Retraites/PENSIPP 0.0/Simulations/CN/ageref.RData")
